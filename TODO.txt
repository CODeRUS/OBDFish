--------------Ideas---------------
- Make a VIN decoder (first only VW)
	- for every car brand an own JS library file
	- JS library has a generic function to decode
	- JS library has all lists which are needed to decode VIN. E.g. models, manufacturing date , ...


- Eine Seite für Statische Daten		-> FERTIG
	- Adapter ID
	- OBD Standard
	- VIN mit Auswertung über Webseite

- Mehrere Seiten für Dynamische Daten
	- Diese Seiten haben je 6 Parameter
	- Die Seiten sind konfigurierbar (6 DropDown Boxen)
	- Wenn ein Parameter nicht unterstüzt ist: "Nicht unterstüzt" anzeigen
	- 

- Profile für Autos anlegen
	- Die Konfiguration der Dynamischen Seiten wird hier abgespeichert
	- auch die Zuornung der bekannten Adapter kann hierüber erfolgen -> das ist fraglich, mehr darüber nachdenken.

- MIL in Init prüfen. Wenn gesetzt, Warnung anzeigen

- Spannung irgendwie generisch als weitere PID abfragen. Mit in dynamische Parameter.



----------NÄCHSTE SCHRITTE--------------
- Dynamische Dialoge
	- elseif auf switchcase umstellen -> auf Dyn1Page schon umgesetzt. Weitere DynPages erstellen.
	- Weitere PID's anlegen
- MainPage
	- zweite Liste einbauen für bekannte Adapter. Jedes Adapter mit erfolgreicher Verbindung dort eintragen.
	- bekannte Adapter in Projektdaten speichern
	- bei Start der App die zweite Liste anzeigen, wenn sie etwas enthält
	- Bei klick auf "suchen", die zweite Liste unsichtbar machen und die erste anzeigen
	- Der Waiter nach dem INIT soll wieder unsichtbar gemacht werden.
- GeneralInfoPage
	- VIN Abfrage mehrfach wiederholen (10 fach). Testen mit Caddy.
	- Fehler: Wenn die Sequenz nicht fertiggstellt ist, gibt es ein Problem -> Waiter einblenden und Abbruch verhindern.
- Debug Datei anlegen. Alle Console.logs müssen da rein!!!
